You are adding a <class 'transformers.trainer_callback.DefaultFlowCallback'> to the callbacks of this Trainer, but there is already one. The currentlist of callbacks is
:DefaultFlowCallback
WandbCallback
[34m[1mwandb[39m[22m: [33mWARNING[39m Config item 'gradient_accumulation_steps' was locked by 'sweep' (ignored update).
[34m[1mwandb[39m[22m: [33mWARNING[39m Config item 'learning_rate' was locked by 'sweep' (ignored update).
[34m[1mwandb[39m[22m: [33mWARNING[39m Config item 'weight_decay' was locked by 'sweep' (ignored update).
  0%|                                                                                              | 0/15700 [00:00<?, ?it/s]You're using a BartTokenizerFast tokenizer. Please note that with a fast tokenizer, using the `__call__` method is faster than using a method to encode the text followed by a call to the `pad` method to get a padded encoding.
Traceback (most recent call last):
  File "/data/ndeo/bart/bart-hf-model/hyperparameter-search.py", line 127, in train
    trainer.train()
  File "/home/ndeo/.conda/envs/capstone-rnn/lib/python3.8/site-packages/transformers/trainer.py", line 1553, in train
    return inner_training_loop(
  File "/home/ndeo/.conda/envs/capstone-rnn/lib/python3.8/site-packages/transformers/trainer.py", line 1835, in _inner_training_loop
    tr_loss_step = self.training_step(model, inputs)
  File "/home/ndeo/.conda/envs/capstone-rnn/lib/python3.8/site-packages/transformers/trainer.py", line 2679, in training_step
    loss = self.compute_loss(model, inputs)
  File "/home/ndeo/.conda/envs/capstone-rnn/lib/python3.8/site-packages/transformers/trainer.py", line 2704, in compute_loss
    outputs = model(**inputs)
  File "/home/ndeo/.conda/envs/capstone-rnn/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/ndeo/.conda/envs/capstone-rnn/lib/python3.8/site-packages/accelerate/utils/operations.py", line 632, in forward
    return model_forward(*args, **kwargs)
  File "/home/ndeo/.conda/envs/capstone-rnn/lib/python3.8/site-packages/accelerate/utils/operations.py", line 620, in __call__
    return convert_to_fp32(self.model_forward(*args, **kwargs))
  File "/home/ndeo/.conda/envs/capstone-rnn/lib/python3.8/site-packages/torch/amp/autocast_mode.py", line 12, in decorate_autocast
    return func(*args, **kwargs)
  File "/home/ndeo/.conda/envs/capstone-rnn/lib/python3.8/site-packages/transformers/models/bart/modeling_bart.py", line 1388, in forward
    outputs = self.model(
  File "/home/ndeo/.conda/envs/capstone-rnn/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/ndeo/.conda/envs/capstone-rnn/lib/python3.8/site-packages/transformers/models/bart/modeling_bart.py", line 1274, in forward
    decoder_outputs = self.decoder(
  File "/home/ndeo/.conda/envs/capstone-rnn/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/ndeo/.conda/envs/capstone-rnn/lib/python3.8/site-packages/transformers/models/bart/modeling_bart.py", line 1132, in forward
    layer_outputs = decoder_layer(
  File "/home/ndeo/.conda/envs/capstone-rnn/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/ndeo/.conda/envs/capstone-rnn/lib/python3.8/site-packages/transformers/models/bart/modeling_bart.py", line 463, in forward
    hidden_states = self.activation_fn(self.fc1(hidden_states))
  File "/home/ndeo/.conda/envs/capstone-rnn/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1130, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/ndeo/.conda/envs/capstone-rnn/lib/python3.8/site-packages/torch/nn/modules/linear.py", line 114, in forward
    return F.linear(input, self.weight, self.bias)
RuntimeError: CUDA out of memory. Tried to allocate 20.00 MiB (GPU 0; 15.74 GiB total capacity; 3.84 GiB already allocated; 16.00 MiB free; 3.86 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF