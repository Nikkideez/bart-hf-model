  0%|                                                                                                                                                                                                                                        | 0/1258 [00:00<?, ?it/s]You're using a BartTokenizerFast tokenizer. Please note that with a fast tokenizer, using the `__call__` method is faster than using a method to encode the text followed by a call to the `pad` method to get a padded encoding.
  0%|â–‹                                                                                                                                                                                                                               | 4/1258 [00:00<02:28,  8.42it/s]Traceback (most recent call last):
  File "/home/nikx/Documents/Projects/capstone/bart/model/train-model.py", line 66, in <module>
    trainer.train()
  File "/home/nikx/capstone/bart-env/lib/python3.9/site-packages/transformers/trainer.py", line 1553, in train
    return inner_training_loop(
  File "/home/nikx/capstone/bart-env/lib/python3.9/site-packages/transformers/trainer.py", line 1914, in _inner_training_loop
    self.optimizer.step()
  File "/home/nikx/capstone/bart-env/lib/python3.9/site-packages/accelerate/optimizer.py", line 132, in step
    self.scaler.step(self.optimizer, closure)
  File "/home/nikx/capstone/bart-env/lib/python3.9/site-packages/torch/cuda/amp/grad_scaler.py", line 416, in step
    retval = self._maybe_opt_step(optimizer, optimizer_state, *args, **kwargs)
  File "/home/nikx/capstone/bart-env/lib/python3.9/site-packages/torch/cuda/amp/grad_scaler.py", line 315, in _maybe_opt_step
    retval = optimizer.step(*args, **kwargs)
  File "/home/nikx/capstone/bart-env/lib/python3.9/site-packages/accelerate/optimizer.py", line 185, in patched_step
    return method(*args, **kwargs)
  File "/home/nikx/capstone/bart-env/lib/python3.9/site-packages/torch/optim/lr_scheduler.py", line 68, in wrapper
    return wrapped(*args, **kwargs)
  File "/home/nikx/capstone/bart-env/lib/python3.9/site-packages/torch/optim/optimizer.py", line 373, in wrapper
    out = func(*args, **kwargs)
  File "/home/nikx/capstone/bart-env/lib/python3.9/site-packages/torch/optim/optimizer.py", line 76, in _use_grad
    ret = func(self, *args, **kwargs)
  File "/home/nikx/capstone/bart-env/lib/python3.9/site-packages/torch/optim/adamw.py", line 184, in step
    adamw(
  File "/home/nikx/capstone/bart-env/lib/python3.9/site-packages/torch/optim/adamw.py", line 335, in adamw
    func(
  File "/home/nikx/capstone/bart-env/lib/python3.9/site-packages/torch/optim/adamw.py", line 599, in _multi_tensor_adamw
    exp_avg_sq_sqrt = torch._foreach_sqrt(device_exp_avg_sqs)
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 20.00 MiB. GPU 0 has a total capacty of 7.78 GiB of which 12.69 MiB is free. Process 198351 has 7.36 GiB memory in use. Of the allocated memory 7.03 GiB is allocated by PyTorch, and 209.20 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF
{'loss': 6.8147, 'learning_rate': 1.624749612285061e-05, 'epoch': 0.0}
{'loss': 7.2551, 'learning_rate': 1.624749612285061e-05, 'epoch': 0.0}
{'loss': 6.7589, 'learning_rate': 1.624749612285061e-05, 'epoch': 0.0}
{'loss': 7.7653, 'learning_rate': 1.624749612285061e-05, 'epoch': 0.01}